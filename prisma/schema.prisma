datasource db {
    provider            = "postgresql"
    url             	= env("DATABASE_URL")
    directUrl           = env("DIRECT_URL")
    shadowDatabaseUrl   = env("SHADOW_DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                  Int @id @default(autoincrement())
    displayName         String
    oauthConnections    OAuthConnection[]
    tokens              LoginToken[]
    vods                Vod[]
}

model LoginToken {
    id          Int @id @default(autoincrement())
    token       String
    expires     DateTime
    userId      Int
    user        User @relation(fields: [userId], references: [id])
}

model OAuthConnection {
    id              Int @id @default(autoincrement())
    accountId       String
    authCode        String
    refreshToken    String
    userId          Int
    user            User @relation(fields: [userId], references: [id])
    provider        OAuthProvider
}

model Vod {
    id              Int @id @default(autoincrement())
    provider        VideoService
    link            String
    userId          Int
    user            User @relation(fields: [userId], references: [id])
}

model ContributorToken {
    id              Int @id @default(autoincrement())
    token           String
    expires         DateTime
    contributorID   Int
    contributor     CommunityContributor @relation(fields: [contributorID], references: [id])
}

model CommunityContributor {
    id              Int @id @default(autoincrement())
    nick            String
    password        String
    tokens          ContributorToken[]
    permissions     CommunityCreator[]
}

model CommunityCreator {
    id              Int @id @default(autoincrement())
    name            String
    slug            String @unique
    imageLink       String?
    description     String?
    vods            CommunityVod[]
    allowedUsers    CommunityContributor[]
}

model CommunityVod {
    id                  Int @id @default(autoincrement())
    service             VideoService
    videoTitle          String
    videoId             String
    videoThumbUrl       String
    slug                String
    dateRecorded        String
    communityCreatorId  Int
    communityCreator    CommunityCreator @relation(fields: [communityCreatorId], references: [id])
    annotations         CommunityVodAnnotation[]
}

model CommunityVodAnnotation {
    id              Int @id @default(autoincrement())
    note            String?
    subject         String?
    game            String?
    timestamp       Int
    communityVodId  Int
    communityVod    CommunityVod @relation(fields: [communityVodId], references: [id])
}

enum ImageType {
    THUMBNAIL
    COVER
    DEFAULT
}

enum VideoService {
    Youtube
    Twitch
    Kick
    Rumble
}

enum OAuthProvider {
    GOOGLE
    TWITCH
}